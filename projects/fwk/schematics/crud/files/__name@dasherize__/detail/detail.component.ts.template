import { Location, NgFor, NgIf } from '@angular/common';
import { Component } from '@angular/core';
import { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { ActivatedRoute } from '@angular/router';
import { takeUntil } from 'rxjs';
import { LifecycleComponent } from 'fwk';
import { <%= classify(name) %>Service } from '../services/<%= dasherize(name) %>.service';

@Component({
  selector: 'app-detail',
  templateUrl: './detail.component.html',
  styleUrls: ['./detail.component.scss'],
  standalone: true,
  imports: [
    NgIf,
    ReactiveFormsModule,
    MatButtonModule,
    MatInputModule,
    MatSelectModule,
    NgFor
  ],
})
export class DetailComponent extends LifecycleComponent {
  protected <%= lowercase(name) %>Form: FormGroup = new FormGroup({
    id: new FormControl<number | null>(null)
  });

  constructor(
    private _route: ActivatedRoute,
    private _<%= lowercase(name) %>Service: <%= classify(name) %>Service,
    private _location: Location
  ) { super(); }

  public ngOnInit(): void {
    this._route.paramMap
      .pipe(
        takeUntil(this.$componentDestroyed)
      )
      .subscribe(paramMap => {
        if (!paramMap.has('id')) return;
        this._<%= lowercase(name) %>Service.get(Number.parseInt(paramMap.get('id')!))
          .pipe(takeUntil(this.$componentDestroyed))
          .subscribe(<%= lowercase(name) %> => this.<%= lowercase(name) %>Form.patchValue(<%= lowercase(name) %>))
      })
  }

  protected save(): void {
    if (this.<%= lowercase(name) %>Form.invalid)
      return;
    const <%= lowercase(name) %> = this.<%= lowercase(name) %>Form.value;
    if (<%= lowercase(name) %>.id) {
      this._<%= lowercase(name) %>Service.update(<%= lowercase(name) %>.id, <%= lowercase(name) %>).subscribe({
        next: () => this.goBack()
      });
    } else {
      this._<%= lowercase(name) %>Service.create(<%= lowercase(name) %>).subscribe({
        next: () => this.goBack()
      });
    }
  }

  protected get isCreation(): boolean {
    return !this.<%= lowercase(name) %>Form.get('id')?.value;
  }

  protected cancel(): void {
    this.goBack();
  }

  private goBack(): void {
    this._location.back();
  }
}
