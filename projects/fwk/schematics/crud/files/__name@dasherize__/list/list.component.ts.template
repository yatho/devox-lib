import { Component } from '@angular/core';
import { Observable, switchMap, takeUntil } from 'rxjs';
import { <%= classify(name) %> } from '../models/<%= classify(name) %>';
import { <%= classify(name) %>Service } from '../services/<%= dasherize(name) %>.service';
import { MatIconModule } from '@angular/material/icon';
import { MatTableModule } from '@angular/material/table';
import { MatButtonModule } from '@angular/material/button';
import { MatDialog, MatDialogModule } from '@angular/material/dialog';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';
import { Router } from '@angular/router';
import { AsyncPipe, DatePipe } from '@angular/common';
import { LifecycleComponent } from 'fwk';


@Component({
  selector: 'app-list',
  templateUrl: './list.component.html',
  styleUrls: ['./list.component.scss'],
  standalone: true,
  imports: [
    AsyncPipe,
    MatIconModule,
    MatTableModule,
    MatButtonModule,
    MatDialogModule,
    MatSnackBarModule,
    DatePipe
  ]
})
export class ListComponent extends LifecycleComponent {
  protected $<%= lowercase(name) %>s: Observable<Array<<%= classify(name) %>>>;
  protected displayedColumns: Array<string> = ['id', 'civility', 'lastname', 'firstname', 'email', 'phone', 'createdAt', 'updatedAt', 'actions'];

  constructor(private _<%= lowercase(name) %>Service: <%= classify(name) %>Service,
    private _router: Router,
    private _dialog: MatDialog,
    private _snackBar: MatSnackBar) {
    super();
    this.$<%= lowercase(name) %>s = this._<%= lowercase(name) %>Service.getList();
  }

  protected create(): void {
    this._router.navigate(['<%= dasherize(name) %>s', 'create']);
  }

  protected edit(<%= lowercase(name) %>: <%= classify(name) %>): void {
    this._router.navigate(['<%= lowercase(name) %>s', <%= lowercase(name) %>.id]);
  }

  protected async delete(id: number): Promise<void> {
    const { ConfirmBoxComponent } = await import('fwk');
    this._dialog.open(ConfirmBoxComponent)
    .afterClosed()
      .pipe(
        takeUntil(this.$componentDestroyed)
      )
      .subscribe(confirm => {
        if (!confirm) return;
        this._<%= lowercase(name) %>Service.delete(id).subscribe({
          complete: () => {
            this.$<%= lowercase(name) %>s = this.$<%= lowercase(name) %>s.pipe(
              switchMap(() => this._<%= lowercase(name) %>Service.getList())
            );
            this._snackBar.open(`L'élément ${id} a bien été supprimé`);
          }
        });
      });
  }
}